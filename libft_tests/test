set -e
source ../config.sh
export FRAMEWORK_PATH=../testframework
RENDU_PATH=$LIBFT_PATH
eval RENDU_PATH=$RENDU_PATH

function usage()
{
	echo "Usage:"
	echo "    ./test part1"
	echo "    ./test part2            # Also run part1"
	echo "    ./test bonus            # Also run part1 and part2"
	echo "    ./test qperez"
	echo "    ./test moulinator"
	echo "    ./test extra            # Also run part1, part2 and bonus" 
	echo "                              (You need to set extra test in config.sh)"
	echo "    ./test all              # Include bonus, qperez and moulinator" 
	echo ""
	echo "Options:"
	echo "    -h --help"
	echo ""
}

if [ -z "$1" ]; then
	usage
fi

while [ "$1" != "" ]; do
	PARAM=`echo $1 | awk -F= '{print $1}'`
	VALUE=`echo $1 | awk -F= '{print $2}'`
	case $PARAM in
		-h | --help)
			usage
			exit
			;;
		--test)
			ENVIRONMENT=$VALUE
			;;
		part1)
			TESTSUITE=part1
			;;
		part2)
			TESTSUITE=part2
			;;
		bonus)
			TESTSUITE=bonus
			;;
		all)
			TESTSUITE=all
			;;
		qperez)
			TESTSUITE=qperez
			;;
		moulinator)
			TESTSUITE=moulinator
			;;
		extra)
			TESTSUITE=extra
			;;
		*)
			echo "ERROR: unknown parameter \"$PARAM\""
			usage
			exit 1
			;;
	esac
	shift
done


fn_setVariables () {
	NAME=moulitest
	CC="gcc"
	CFLAGS="-Wall -Werror -Wextra -pedantic -I$RENDU_PATH -I$FRAMEWORK_PATH"
	LDFLAGS="-L$RENDU_PATH -lft"
	BUILD_MAIN=main.build.c
}
fn_setVariables

fn_compileProject () {
	make re -C $RENDU_PATH
}

lf=$'\n';
fntestProject () {
	# echo "$PREFIX" > $BUILD_MAIN
	# cat main.c >> $BUILD_MAIN
	TEST_DEF=""
	TEST_MAIN_DEF=""
	for file in ./tests/*.spec.c
	do
		sed -e ':a' -e 'N' -e '$!ba' -e "s/\n/<NL>/g" $file >> tmp
		basename="$(basename "$file")"
		fnName=$(sed 's/\..*//g' <<< $basename)
		fnFileContent=$(sed -e ':a' -e 'N' -e '$!ba' -e "s/\n/<NL>/g" $file)
		# echo $fnFileContent

		TEST_DEF="\
$TEST_DEF<NL>\
#ifdef TEST_$fnName<NL>\
UT_TEST($fnName)<NL>\
{<NL>\
$fnFileContent<NL>\
}<NL>\
#endif<NL>"
		TEST_MAIN_DEF="\
$TEST_MAIN_DEF<NL>\
#ifdef TEST_$fnName<NL>\
	UT_ADD_TEST($fnName);<NL>\
#endif<NL>"
	done
	> $BUILD_MAIN
	echo "$PREFIX" >> $BUILD_MAIN
	sed -e "s/<MAIN_TEST_BLOCK>/$TEST_MAIN_DEF/g" -e "s/<TEST_DEF_BLOCK>/$TEST_DEF/g" -e "s/<NL>/\\$lf/g" main.c >> $BUILD_MAIN
	$CC $CFLAGS $RENDU_PATH/libft.a  $BUILD_MAIN ../testframework/testframework.c
	rm $BUILD_MAIN
	./a.out
	rm ./a.out
}

fn_runMoulinator () {
	echo "===================================================================="
	echo "Run moulinator test suite..."
	echo "===================================================================="
	cd testsuite_moulinator
	gcc -fPIC -Wall -Werror -Wextra -c $RENDU_PATH/*.c
	gcc -fPIC -Werror -Wall -Wextra -shared -o libft.so *.o
	./Mouli-nator
	cd ..
}

fn_runQperez () {
	echo "===================================================================="
	echo "Run qperez test suite..."
	echo "===================================================================="
	gcc testsuite_qperez/main.c $RENDU_PATH/*.c -I$RENDU_PATH && ./a.out
}

fn_runTestSuite () {
	if [ "$TESTSUITE" = "part1" ]; then
		PREFIX="#define PART1\n"
	elif [ "$TESTSUITE" = "part2" ]; then
		PREFIX="#define PART1\n#define PART2"
	elif [ "$TESTSUITE" = "bonus" ]; then
		PREFIX="#define PART1\n#define PART2\n#define BONUS\n"
	elif [ "$TESTSUITE" = "extra" ] || [ "$TESTSUITE" = "all" ]; then
		PREFIX="#define PART1\n#define PART2\n#define BONUS\n"
		for job in $(echo $LIBFT_EXTRA_TESTS | tr "," " "); do
			PREFIX="$PREFIX#define TEST_$job\n"
		done
	fi

	if [ "$TESTSUITE" = "moulinator" ]; then
		fn_runMoulinator
	elif [ "$TESTSUITE" = "qperez" ]; then
		fn_runQperez
	else
		fn_compileProject
		fntestProject
	fi

	if [ "$TESTSUITE" = "all" ]; then
		fn_runMoulinator
		fn_runQperez
	fi
}

if [ ! -z "$TESTSUITE" ]; then
	fn_runTestSuite
fi
