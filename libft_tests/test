#!/usr/bin/python
import argparse, sys, os, fnmatch, re, json
from subprocess import call

config = json.loads(open('../config.json').read())

RENDU_PATH = os.path.expanduser(config['libft']['rendu_path'])
TEST_FOLDER_PATH = 'tests'
TEST_FILE_SUFFIX = '.spec.c'
BUILD_MAIN = "main.build.c"
FRAMEWORK_PATH = "../testframework"
FRAMEWORK_SOURCE = FRAMEWORK_PATH + "/testframework.c"

def print_usage():
	print "Usage:"
	print "    ./test part1"
	print "    ./test part2            # Also run part1"
	print "    ./test bonus            # Also run part1 and part2"
	# print "    ./test qperez"
	# print "    ./test moulinator"
	print "    ./test extra            # Also run part1, part2 and bonus" 
	print "                              (You need to set extra test in config.sh)"
	# print "    ./test all              # Include bonus, qperez and moulinator" 
	print ""
	print "Options:"
	print "    -h --help"
	print ""

def get_filenames():
	matches = []
	for root, dirnames, filenames in os.walk('tests'):
	  for filename in fnmatch.filter(filenames, '*.spec.c'):
	      matches.append(os.path.join(root, filename))
	pattern = '(ft_.*).spec.c'
	pattern_obj = re.compile(pattern)
	filenames = [re.sub(r".*\/(ft_.*).spec.c", r"\1", path) for path in matches]
	return filenames

def build_test_def(filenames):
	output = ""
	for name in filenames:
		path = os.path.join(TEST_FOLDER_PATH, name+TEST_FILE_SUFFIX)
		content = open(path, "r").read()
		output += '''
#ifdef TEST_{name}
UT_TEST({name})
{{
{content}
}}
#endif
'''.format(name=name, content=content)
	return output;

def build_test_main_def(filenames):
	output = ""
	for name in filenames:
		path = os.path.join(TEST_FOLDER_PATH, name+TEST_FILE_SUFFIX)
		content = open(path, "r").read()
		output += '''
#ifdef TEST_{name}
	UT_ADD_TEST({name});
#endif
'''.format(name=name)
	return output;

def get_main_content():
	filenames = get_filenames()
	test_def_content = build_test_def(filenames)
	test_main_def_content = build_test_main_def(filenames)
	original_file = open("main.c", "r").read()
	main_build_content = (original_file
								.replace("<TEST_DEF_BLOCK>", test_def_content)
								.replace("<MAIN_TEST_BLOCK>", test_main_def_content))
	return main_build_content

def build_extra():
	output = ""
	for fn_name in config['libft']['extra_tests']:
		output += "#define TEST_{}\n".format(fn_name)
	return output

def build_prefix(testsuite):
	part1_def = "#define PART1\n"
	part2_def = "#define PART2\n"
	bonus_def = "#define BONUS\n"
	prefix = ""
	if testsuite == 'part1':
		prefix = part1_def
	elif testsuite == 'part2':
		prefix = part1_def + part2_def
	elif testsuite == 'bonus':
		prefix = part1_def + part2_def + bonus_def
	elif testsuite == 'extra':
		prefix = build_extra() + part1_def + part2_def + bonus_def
	return prefix

def create_main_build(testsuite):
	main_content = get_main_content()
	main_content = build_prefix(testsuite) + main_content
	open("main.build.c", "w").write(main_content)

def build_source():
	call(["make", "re", "-C", RENDU_PATH])

def run_test():
	build_source()
	call(["gcc", "-Wall", "-Werror", "-Wextra", "-pedantic", "-I"+FRAMEWORK_PATH,
		"-I"+RENDU_PATH,
		RENDU_PATH+"/libft.a", BUILD_MAIN, FRAMEWORK_SOURCE])
	call(["./a.out"])

if len(sys.argv) == 1:
	print_usage()
else:
	testsuite = sys.argv[1]
	create_main_build(testsuite)
	run_test()
